#!/bin/bash

# Define color codes
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[1;33m'
export BLUE='\033[0;34m'
export BOLD_BLUE='\033[1;34m'
export NC='\033[0m' # No Color

# Function to display ASCII art logo
display_logo() {
    local app_name="$1"
    local tagline="$2"
    
    clear
    echo -e "${BLUE}"
    case "$app_name" in
        "Signal")
            echo '    ███████╗██╗ ██████╗ ███╗   ██╗ █████╗ ██╗     '
            echo '    ██╔════╝██║██╔════╝ ████╗  ██║██╔══██╗██║     '
            echo '    ███████╗██║██║  ███╗██╔██╗ ██║███████║██║     '
            echo '    ╚════██║██║██║   ██║██║╚██╗██║██╔══██║██║     '
            echo '    ███████║██║╚██████╔╝██║ ╚████║██║  ██║███████╗'
            echo '    ╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝'
            ;;
        "Discord")
            echo '    ██████╗ ██╗███████╗ ██████╗ ██████╗ ██████╗ ██████╗ '
            echo '    ██╔══██╗██║██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔══██╗'
            echo '    ██║  ██║██║███████╗██║     ██║   ██║██████╔╝██║  ██║'
            echo '    ██║  ██║██║╚════██║██║     ██║   ██║██╔══██╗██║  ██║'
            echo '    ██████╔╝██║███████║╚██████╗╚██████╔╝██║  ██║██████╔╝'
            echo '    ╚═════╝ ╚═╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ '
            ;;
        "Docker")
            echo '    ██████╗  ██████╗  ██████╗██╗  ██╗███████╗██████╗ '
            echo '    ██╔══██╗██╔═══██╗██╔════╝██║ ██╔╝██╔════╝██╔══██╗'
            echo '    ██║  ██║██║   ██║██║     █████╔╝ █████╗  ██████╔╝'
            echo '    ██║  ██║██║   ██║██║     ██╔═██╗ ██╔══╝  ██╔══██╗'
            echo '    ██████╔╝╚██████╔╝╚██████╗██║  ██╗███████╗██║  ██║'
            echo '    ╚═════╝  ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝'
            ;;
        "VSCode")
            echo '    ██╗   ██╗███████╗ ██████╗ ██████╗ ██████╗ ███████╗'
            echo '    ██║   ██║██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝'
            echo '    ██║   ██║███████╗██║     ██║   ██║██║  ██║█████╗  '
            echo '    ╚██╗ ██╔╝╚════██║██║     ██║   ██║██║  ██║██╔══╝  '
            echo '     ╚████╔╝ ███████║╚██████╗╚██████╔╝██████╔╝███████╗'
            echo '      ╚═══╝  ╚══════╝ ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝'
            ;;
        "Update")
            echo '    ██╗   ██╗██████╗ ██████╗  █████╗ ████████╗███████╗'
            echo '    ██║   ██║██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝██╔════╝'
            echo '    ██║   ██║██████╔╝██║  ██║███████║   ██║   █████╗  '
            echo '    ██║   ██║██╔═══╝ ██║  ██║██╔══██║   ██║   ██╔══╝  '
            echo '    ╚██████╔╝██║     ██████╔╝██║  ██║   ██║   ███████╗'
            echo '     ╚═════╝ ╚═╝     ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝'
            ;;
        *)
            # Generic ASCII art for other applications
            echo "    ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     "
            echo "    ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     "
            echo "    ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     "
            echo "    ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     "
            echo "    ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗"
            echo "    ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝"
            ;;
    esac
    echo -e "${NC}"
    echo -e "${BOLD_BLUE}============================================================${NC}"
    echo -e "${BOLD_BLUE}                  $app_name Installer                       ${NC}"
    echo -e "${BOLD_BLUE}           $tagline           ${NC}"
    echo -e "${BOLD_BLUE}============================================================${NC}"
    echo
}

# Progress bar function
progress() {
    local duration=$1
    local step=0.25  # Update every 0.25 seconds
    local progress=0
    local cols=$(tput cols)
    local bar_size=$((cols - 35))  # Reserve space for text and percentage

    while [ $progress -le 100 ]; do
        printf "\r${YELLOW}[%-${bar_size}s] %3d%%" "$(printf '#%.0s' $(seq 1 $((progress * bar_size / 100))))" "$progress"
        progress=$((progress + 2))
        sleep $step
    done
    echo -e "${NC}"
}

# Error handling function
handle_error() {
    echo -e "${RED}Error: $1${NC}"
    exit 1
}